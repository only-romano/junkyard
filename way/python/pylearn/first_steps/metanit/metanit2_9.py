#!Учебный код по программе Метанит, Глава 2, часть 9. Область видимости переменных.
#область видимости переменной - scope, определяет контекст переменной: локальный или глобальный.
name = "Kato"#переменная глобальная, она определена вне любой из функций и доступна любой функции в программе.
def say_hi():
    print("Hello", name)
def say_bye():#плохой ли это тон - не оставлять строк между функциями или циклами в одном блоке кода, если он связан смыслом?
    print("Good bye", name)
say_hi()
say_bye()

def say_poop():#с каждой из функций определяется локальная переменная name, хотя они называются одинаково - это две разные переменные и каждая доступна только в рамках своей функции.
    name="Sam"#локальная переменная определяется внутри функции и доступна только из этой функции, имеет локальную область видимости
    surname="Johnson"#в другой функции переменную определённую локально, использовать не получится.
    print("Hello", name, surname)
def say_pee():
    name="Tom"#если локально определена переменная с именем как у глобальной переменной, то функция использует определённую в ней локально, которая скрывает глобальную.
    print("Good bye", name)
say_poop()
say_pee()

def say_goodbye():
    global name#позволяет изменять внутри функции глобальную переменную. В питоне, как и в других языках не рекомендуется использовать глобальные переменные.
    name = "Zhenya"#допустимой практикой является определение небольшого числа глобальных констант, которые не изменяются в процессе работы программы.
    print("Good bye", name)
say_goodbye()
say_hi()
say_bye()

#Вычисление площади круга и длины окружности, копия находится в circle_square.py
PI=3.14#в отдельные файлики идут программы с импутами - для хвастовства. В данном примере, пи - константа, которая не изменится, поэтому определена глобально.
#имя константы обычно определяется заглавными буквами
def circle_square(r):#r=радиус
    print("Площадь круга с радиусом", r, "равна", PI*r*r)
    print("Длина окружности круга с радиусом", r, "равна", 2*PI*r)

def test(num):#спёрла у тебя блок
    print(num, ' ', circle_square(num))
test(1)
test(7)
test(103)
test(14)
test(1001)
test(2017)
test(180)