#! Работа с материалами Metanit, глава 9, часть 2.  "Кнопки".

# Тулкит tkinter содержит набор компонентов или виджетов, одним из
# которых является кнопка.

from tkinter import *

clicks = 0


# Обработка нажатия на кнопку. В качестве обработчика нажатия
# устанавливается функция click_button.
def click_button():
    # В этой функции изменяется глобальная переменная clicks, которая
    # хранит число кликов, и ее значение выводится в заголовок окна.
    global clicks
    # Таким образом, при каждом нажатии кнопки будет срабатывать
    # функция click_button, и количество кликов будет увеличиваться.
    clicks += 1
    root.title("Клики {}".format(clicks))


root = Tk()
root.title("Путь к калькулятору")
root.geometry("400x600")

# Для создания кнопки используется конструктор Button().  В этом
# конструкторе с помощью параметра text можно установить текст кнопки.
# Каждый виджет, в том числе кнопка, имеет ряд атрибутов, которые влияют
# на ее визуализацию и которые мы можем настроить через конструктор:
btn = Button(root,                  # параметр master.
             text="Кнопку нажать",  # текст кнопки.
             background="#555",     # фоновый цвет кнопки.
             foreground="#ccc",     # цвет текста.
             padx="20",             # отступ от границ по горизонтали.
             pady="8",              # отступ от границ по вертикали.
             font="16",             # высота шрифта.
             # Для обработки нажатия на кнопку необходимо установить в
             # конструкторе параметр command, присвоив ему ссылку на
             # функцию, которая будет срабатывать при нажатии:
             command=click_button
             )

# Параметры pady, padx, font принимают числовое значение, а параметры
# background и foreground получают шестнадцатеричное значение цвета.
# Параметр font содержит определение шрифта.

# Kонструктор Button может принимать следующие параметры:
# Button (master, options)

# Параметр master представляет ссылку на родительский контейнер.

# Однако если в коде создается одно окно, то кнопка и любой другой
# элемент уже по умолчанию размещаются в этом окне.  Поэтому первый
# параметр мы можем опустить, как в примерах выше.  Если бы у нас в коде
# создавалось бы несколько окон, тогда мы могли бы передать в
# конструктор Button ссылку на нужное окно.

# Второй параметр options представляет набор на самом деле набор
# параметров, которые мы можем установить по их имени:
# - activebackground: цвет кнопки, когда она находится в нажатом
#   состоянии.
# - activeforeground: цвет текста кнопки, когда она в нажатом состоянии.
# - bd: толщина границы (по умолчанию 2).
# - bg/background: фоновый цвет кнопки.
# - fg/foreground: цвет текста кнопки.
# - font: шрифт текста, например, font="Arial 14" - шрифт Arial высотой
#   14px, или font=("Verdana", 13, "bold") - шрифт Verdana высотой 13px
#   с выделением жирным.
# - height: высота кнопки.
# - highlightcolor: цвет кнопки, когда она в фокусе.
# - image: изображение на кнопке.
# - justify: устанавливает выравнивание текста.  Значение LEFT
#   выравнивает текст по левому краю, CENTER - по центру, RIGHT - по
#   правому краю.
# - padx: отступ от границ кнопки до ее текста справа и слева.
# - pady: отступ от границ кнопки до ее текста сверху и снизу.
# - relief: определяет тип границы, может принимать значения SUNKEN,
#   RAISED, GROOVE, RIDGE.
# - state: устанавливает состояние кнопки, может принимать значения
#   DISABLED, ACTIVE, NORMAL (по умолчанию).
# - text: устанавливает текст кнопки.
# - textvariable: устанавливает привязку к элементу StringVar.
# - underline: указывает на номер символа в тексте кнопки, который
#   подчеркивается.  По умолчанию значение -1, то есть никакой символ
#   не подчеркивается.
# - width: ширина кнопки.
# - wraplength: при положительном значении строки текста будут
#   переносится для вмещения в пространство кнопки.

# Чтобы сделать элемент видимым, у него вызывается метод pack().
btn.pack()

root.mainloop()
