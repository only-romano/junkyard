public class Metanit3_1{
    public static void main(String[] args){

// Создание объекта

    // Чтобы непосредственно использовать класс в программе, надо создать
    // его объект.  Процесс создания объекта двухступенчатый: вначале
    // объявляется переменная данного класса, а затем с помощью ключевого
    // слова new и конструктора непосредственно создается объект, на
    // который и будет указывать объявленная переменная:

        Book b; // объявление переменной, которая еще не хранит ссылку на
        // объект.  После объявления переменной Book b; эта переменная еще
        // не ссылается ни на какой объект и имеет значение null.

        b = new Book(); // выделение памяти под объект Book

        Book b1 = new Book("Война и мир", "Л. Н. Толстой", 1869);
        b.Info();
        b1.Info();


    }
}

// B классе Book определены три переменных и один метод, который выводит
// значения этих переменных.  Кроме обычных методов в классах используются
// также и специальные методы, которые называются конструкторами.
// Конструкторы нужны для создания нового объекта данного класса и, как
// правило, выполняют начальную инициализацию объекта.  Название
// конструктора должно совпадать с названием класса, здесь у класса Book
// определено два конструктора:

class Book{
    public String name;
    public String author;
    public int year;


// Первый конструктор без параметров присваивает неопределенные начальные
// значения полям:

    Book(){
        name = "неизвестно";
        author = "неизвестно";
        year = 0;
    }

// Nнициализаторы.

    //Кроме конструктора начальную инициализацию объекта вполне можно
    // было проводить с помощью инициализатора объекта.  Так, мы бы могли
    // заменить конструктор без параметров следующим блоком:
//  {
//    name = "неизвестно";
//    author = "неизвестно";
//    year = 0;
// }

// Второй конструктор присваивает полям класса значения, которые
// передаются через его параметры:

    Book(String name, String author){

// Так как имена параметров и имена полей класса в данном случае у нас
// совпадают - name, author, year, то мы используем ключевое слово this.
// Это ключевое слово представляет ссылку на текущий объект.  Поэтому в
// выражении this.name = name; первая часть this.name означает, что name
// - это поле текущего класса, а не название параметра name.  Если бы у
// нас параметры и поля назывались по-разному, то использовать слово this
// было бы необязательно.

        this.name = name;
        this.author = author;
    }

// Мы можем определить несколько конструкторов для установки разного
// количества параметров и затем вызывать один конструктор из другого:

    Book(String name, String author, int year){

        this(name, author);
        this.year = year;

// Например, у нас может сложиться ситуация, когда нам нужно установить
// только два параметра или только три, однако устанавливать в
// конструкторами с тремя параметрами все три поля класса не имеет смысла,
// так как мы можем передать две из них в другой конструктор класса, где и
// произойдет их установка.  Вызов конструктор производится с помощью
// ключевого слова this, после которого идет в скобках список параметров.

    }

    public void Info(){
        System.out.printf("Книга '%s' (автор %s) была издана в %d году.\n",
            name, author, year);
    }
}