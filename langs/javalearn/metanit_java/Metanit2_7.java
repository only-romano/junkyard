public class Metanit2_7{

    // Методы.
        // По умолчанию главный класс любой программы на Java содержит
        // метод main, который служит точкой входа в программу:

    public static void main(String[] args) {

        // Ключевые слова public и static являются модификаторами.
        // Далее идет тип возвращаемого значения. Ключевое слово void
        // указывает на то, что метод ничего не возвращает.

        // Затем идут название метода - main и в скобках параметры метода
        // - String[] args. и в фигурные скобки заключено тело метода
        // - все действия, которые он выполняет.

        // Общее определение методов выглядит следующим образом:

        // [модификаторы] тип_возвращаемого_значения название_метода
        // ([параметры]){
        // тело метода
        // }

        // Модификаторы и параметры необязательны.

        String mes = hello();  // Вызов первого метода.
        System.out.println(mes);

        getSum(2, 3);   // Вызов второго метода.


    // Перегрузка методов.

        // В программе мы можем использовать методы с одним и тем же
        // именем, но с разными типами и/или количеством параметров.
        // Такой механизм называется перегрузкой методов. Например:

        int n1 = getSum2(20,10);
        System.out.println(n1);

        double n2 = getSum2(20.3, 30.4, 9.8);
        System.out.println(n2);

    // Параметры переменной длины

        // Метод может принимать параметры переменной длины одного
        // типа. Например, нам надо передать в метод массив и вычислить
        // сумму чисел этого массива:

        int m1 = getSum3(20, 10);
        System.out.println(m1);

        int m2 = getSum3(20, 34, 9, 5);
        System.out.println(m2);

        int m3 = getSum3();
        System.out.println(m3);

        int l1 = getSum4("Welcome!", 20,10);
        System.out.println(l1);
        int i2 = getSum4("Hello World!");
        System.out.println(i2);

    }

    static void method1(){
        System.out.println("Method1");
    }
    void method2(){
        System.out.println("Method2");
    }

        // Условно методы, которые не возвращают никакого значения,
        // называются процедурами.

        // Кроме void методы в Java могут возвращать конкретное значение.
        // Такие методы, также условно называют функциями. Например:

    int factorial(){
        return 1;
    }

    static String hello(){
        return "Hell to World";
    }

    // В функции в качестве типа возвращаемого значения вместо void
    // используется любой другой тип.  В данном случае тип int и тип
    // String.  Функции также отличаются тем, что мы обязательно
    // должны использовать оператор return, после которого ставится
    // возвращаемое значение.

    // При этом возвращаемое значение всегда должно иметь тот же тип,
    // что значится в определении функции.  и если функция возвращает
    // значение типа int, то после оператора return стоит целочисленное
    // значение (как в данном случае число 1), которое неявно является
    // объектом типа int.

    static void getSum(int x, int y){
        System.out.printf("%d + %d = %d\n", x, y, x+y);
    }

        // Здесь у нас есть два варианта метода getSum(), но при его
        // вызове в зависимости от типа и количества передаваемых
        // параметров система выберет именно ту версию, которая
        // наиболее подходит.

    static int getSum2(int x, int y){
        return x+y;
    }

    static double getSum2(double x, double y, double z){
        return x + y + z;
    }

        //Троеточие перед названием параметра int ...nums указывает
        // на то, что он будет необязательным и будет представлять
        // массив. Мы можем передать в метод getSum одно число,
        // несколько чисел, а можем вообще не передавать никаких
        // параметров.  Причем, если мы хотим передать несколько
        // параметров, то необязательный параметр должен указываться
        // в конце:

    static int getSum3(int ...nums){

        int result =0;
        for(int x:nums)
            result +=x;
        return result;
    }

    static int getSum4(String message, int ...nums){

        System.out.println(message);
        int result2 = 0;
        for(int z:nums)
            result2 += z;
        return result2;
    }
}