#! Учебный код по программе Метанит, Глава 2, часть 11.  Обработка.
#
# Теория.
# Два типа ошибок - синтаксические (при наличие таких ошибок прога не
# может быть скомпилирована, sintax error); ошибки выполнения (runtime
# error, появляются в скомпилированной программе во процессе её
# выполнения).  Ошибки выполнения, так называемые исключение, к примеру:
string = "5"            # stting(hello) or string = input("...")
number = int(string)    # При вводе не числа программа прервётся
print(number)           # ValueError

# Конструкция "try...except" для обработки исключений:

string = input("Будет произведено преобразование, введите число: ")
try:
    number = int(string)
    print("Введённое число - ", number)
except:       # "except ValueError:" - обработает конкретную ошибку.
    print("Преобразование прошло неудачно")
print("Завершение преобразования")

# Такая конструкция обработает все исключения, но можно конкретезировать
# указав тип исключения посе слова except тип_исключения.
#
# Можно указывать несколько исключений с разной обработкой их.  А также
# необязательный блок "finally", который выполняется вне зависимо, было
# ли сгенерировано исключение.  Блок "finally" обычно используется для
# освобождения используемых ресурсов, например, для закрытия файлов.  С
# помощью оператора "as" можно передать информацию об исключнии в
# переменную, которую можно использовать в блоке "except".
#
# Иногда возникает необходимость вручную сгенерировать то или иное
# исключение.  Для этого применяется оператор "raise".  При вызове
# исключения можно вывести сообщение пользователю.
#
try:
    number1 = int(input("Введите первое число: "))
    number2 = int(input("Введите второе число: "))
    if number2 == 0:    # генератор исключения с оператором "raise"
        raise Exception("Второе число не должно быть равно 0")
    print("Результат деления: ", number1/number2)
except ValueError:   # использование конкретного исключения
    print("Преобразование прошло неудачно")
except Exception as e:     # использования оператора "as"
    print("Общее исключение", e)
finally:            # необязательный блок "finally"
    print("Блок \"try\" завершир выполнение")
print("Завершение программы")
#
# Конец.