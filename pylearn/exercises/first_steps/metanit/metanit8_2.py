#! Работа с материалами Metanit, глава 8, часть 2.  Операции с датами.

import locale
from datetime import datetime, timedelta

# Форматирование дат и времени.

# Для форматирования объектов date и time в этих классах предусмотрен
# метод strftime(format).  Этот метод принимает только один параметр,
# указывающий на формат, в который нужно преобразовать дату или время.

# Для определения формата мы можем использовать один из следующих кодов
# форматирования:
# - %a: аббревиатура дня недели.  Например, Wed - от слова Wednesday (по
#       умолчанию используются английские наименования).
# - %A: день недели полностью, например, Wednesday.
# - %b: аббревиатура названия месяца. Например, Oct.
# - %B: название месяца полностью, например, October.
# - %d: день месяца, дополненный нулем, например, 01.
# - %m: номер месяца, дополненный нулем, например, 05.
# - %y: год в виде 2-х чисел.
# - %Y: год в виде 4-х чисел.
# - %H: час в 24-х часовом формате, например, 13.
# - %I: час в 12-ти часовом формате, например, 01.
# - %M: минута.
# - %S: секунда.
# - %f: микросекунда.
# - %p: указатель AM/PM.
# - %c: дата и время, отформатированные под текущую локаль.
# - %x: дата, отформатированная под текущую локаль.
# - %X: время, форматированное под текущую локаль.

now = datetime.now()    # БЛИН, ПРИКОЛЬНО - ВОТ И РЕШЕНИЯ БЕЗ МАССИВОВ.
print(now.strftime("%Y-%m-%d"), now.strftime("%d/%m/%Y"))
print(now.strftime("%d/%m/%y"), now.strftime("%d %B %Y (%A)"))
print(now.strftime("%d/%m/%y %I:%M"))

locale.setlocale(locale.LC_ALL, "")

print(now.strftime("%d %B %Y (%A)"))    # АХАХА, ЕЩЁ И НА РУССКОМ!


# Сложение и ввычитание дат и времени.

# Нередко при работе с датами возникает необходимость добавить к
# какой-либо дате определенный промежуток времени или, наоборот, вычесть
# некоторый период.  И специально для таких операций в модуле datetime
# определен класс timedelta.  Фактически этот класс определяет некоторый
# период времени.

# Для определения промежутка времени можно использовать конструктор:
# timedelta([days] [, seconds] [, microseconds] [, milliseconds]
#           [, minutes] [, hours] [, weeks])

print(timedelta(hours=3), timedelta(hours=3, minutes=30), timedelta(2),
      timedelta(days=2, hours=3, minutes=30))

print(now + timedelta(2), now - timedelta(hours=10, minutes=15))

# Свойства timedelta

# Класс timedelta имеет несколько свойств, с помощью которых мы можем
# получить временной промежуток:
# - days: возвращает количество дней.
# - seconds: возвращает количество секунд.
# - microseconds: возвращает количество микросекунд.

# Кроме того, метод total_seconds() возвращает общее количество секунд,
# куда входят и дни, и собственно секунды, и микросекунды.

period = datetime(2017, 5, 22) - now
print("{} дней  {} секунд   {} микросекунд".format(period.days,
        period.seconds, period.microseconds))

print("Всего: {} секунд".format(period.total_seconds()))


# Сравнение дат.

# Также как и строки и числа, даты можно сравнивать с помощью
# стандартных операторов сравнения:


def deadline_now(date):
    if (now.day == date.day and now.month == date.month and
          now.year == date.year):
        print("Срок сдачи проекта сегодня!")
    elif now > date:
        print("Срок сдачи проекта прошёл")
    else:
        period = date - now
        print("Осталось {} дней".format(period.days))

deadline_now(datetime(2017, 5, 22))
deadline_now(datetime(2017, 12, 23))
deadline_now(datetime(2018, 6, 17))
