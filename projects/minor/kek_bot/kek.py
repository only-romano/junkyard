# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
import pickle
from copy import deepcopy
from datetime import datetime
import requests
# –í–Ω–µ—à–Ω–∏–µ –ø–∞–∫–µ—Ç—ã
import telebot
from telebot import types
# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
import nonsense_buttons as NB
# Config
try:
    from config import pickle_file, bot_name, bot_token, bad_file_replacer
except ImportError:
    pickle_file = "db.pickle"
    bot_name = "üí¨  TopKEK bot  üí¨\n\n"  # –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
    bot_token = ""
    bad_file_replacer = 'static/empty.png' 

# Bot
bot = telebot.TeleBot(token=bot_token)

# Users
try:
    with open(pickle_file, 'rb') as file:
        users = pickle.load(file)
except Exception:
    # –ï—Å–ª–∏ –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    users = {}


# –†–∞–∑–º–µ—Ç–∫–∞
def get_markup(buttons, line_index=None, button_index=None, conflict=None):
    """
    –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏, –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å "–í—ã–±—Ä–∞–Ω–æ" (‚úì) –∫–Ω–æ–ø–æ–∫,
    –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–∏–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ –≤ –æ–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏.

    args:
        buttons: —Å–ø–∏—Å–æ–∫ –ª–∏–Ω–∏–π —Ä–∞–∑–º–µ—Ç–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ –ª–∏–Ω–∏–∏
        ~ [–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ] –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ "–í—ã–±—Ä–∞–Ω–æ" (‚úì):
        ~ line_index: –∏–Ω–¥–µ–∫—Å –ª–∏–Ω–∏–∏ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π
        ~ button_index: –∏–Ω–¥–µ–∫—Å –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –≤ –µ—ë –ª–∏–Ω–∏–∏ —Ä–∞–∑–º–µ—Ç–∫–∏
        ~ conflict: —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
    returns:
        markup: –æ–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ types.InlineKeyboardMarkup
    """
    markup = types.InlineKeyboardMarkup(row_width=3)  # –º–∞–∫—Å.–∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
    # –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã "–í—ã–±—Ä–∞–Ω–æ" (‚úì) —É –∫–Ω–æ–ø–æ–∫
    if line_index is not None:
        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (‚úì) —É –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
        bt = buttons[line_index][button_index][0]  # bt as button_text
        bt = bt[2:-2] if bt.startswith("‚úì") else "‚úì " + bt + " ‚úì"
        buttons[line_index][button_index][0] = bt
        # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ (–≤–æ–∑–º–æ–∂–µ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        if conflict:
            # –ø–µ—Ä–µ–±–æ—Ä –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
            for option in conflict:
                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (‚úì) –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏
                cb = buttons[option[0]][option[1]]  # cb as conflict_button
                if cb[0].startswith("‚úì"):
                    cb[0] = cb[0][2:-2]
    # –ø–µ—Ä–µ–±–æ—Ä —Å–ø–∏—Å–∫–∞ –ª–∏–Ω–∏–π —Ä–∞–∑–º–µ—Ç–∫–∏
    for line in buttons:
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ types.InlineKeyboardButton
        line = [types.InlineKeyboardButton(text=sb[0], callback_data=sb[1])
                for sb in line]  # sb as single_button
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∫–Ω–æ–ø–æ–∫
        markup.add(*line)
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ types.InlineKeyboardMarkup
    return markup


def edit_settings(message, pressed_button=False, options=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫

    args:
        message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
        pressed_button: —Ñ–ª–∞–≥ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        ~ [–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ] –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:
        ~ options: —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏
    """
    if pressed_button:  # –∏–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ (–∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è) –≤ —Å–ø–∏—Å–æ–∫
        buttons_object = message.json['reply_markup']['inline_keyboard']
        buttons_list = process_buttons(buttons_object)
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
        markup = get_markup(buttons_list, *options)
    else:  # –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        buttons_list = deepcopy(NB.settings_buttons)
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å—Ç–∞—Ç—É—Å–æ–≤ "–í—ã–±—Ä–∞–Ω–æ" (‚úì)
        markup = get_markup(set_checkmarks(message.chat.id, buttons_list))
    # —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—Ç–∫–æ–π)
    text = f"{bot_name}–ó–∞–ø–æ–ª–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏ –ø–æ–¥–±–µ—Ä–∏ —Å–µ–±–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞"
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_text(chat_id=message.chat.id,
        message_id=message.message_id, text=text, reply_markup=markup)


def process_buttons(buttons_object):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –∫–Ω–æ–ø–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    return [list(map(lambda button: [button['text'], button['callback_data']],
        line)) for line in buttons_object]


def set_checkmarks(chat_id, buttons):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ "–í—ã–±—Ä–∞–Ω–æ" –∫–Ω–æ–ø–æ–∫ (‚úì)

    args:
        chat_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
        buttons: c–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    returns:
        buttons: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–í—ã–±—Ä–∞–Ω–æ" (‚úì)
    """
    # mark helper
    def create_mark(line_index, button_index):
        # –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å "–í—ã–±—Ä–∞–Ω–æ" (‚úì) –∫–Ω–æ–ø–∫–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
        bt = buttons[line_index][button_index][0]  # bt as button text
        if not bt.startswith("‚úì"):
            buttons[line_index][button_index][0] = "‚úì "+ bt + " ‚úì"
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫ create_mark –¥–ª—è –Ω–∏—Ö
    if chat_id in users:
        if users[chat_id]["sex"]:
            create_mark(1, int(users[chat_id]["sex"])-1)
        if users[chat_id]["age"]:
            create_mark(3, int(users[chat_id]["age"])-1)
        if users[chat_id]["p_sex"]:
            for i in users[chat_id]["p_sex"]:
                create_mark(5, int(i)-1)
        if users[chat_id]["p_age"]:
            for i in users[chat_id]["p_age"]:
                create_mark(7, int(i)-1)
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–í—ã–±—Ä–∞–Ω–æ" (‚úì)
    return buttons


# –ó–∞–ø–∏—Å—å –≤ –ë–î
def update_db(chat_id, key, value):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î,
    –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–∏—á–∏—è –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –∏–º–µ—é—â–µ–≥–æ—Å—è,
    –∑–∞–ø–∏—Å—å –≤ –ë–î –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

    args:
        chat_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
        key: –∫–ª—é—á –∑–∞–ø–∏—Å–∏
        value: –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
    returns:
        —Ñ–ª–∞–≥ (bool) –æ —Å—Ç–∞—Ç—É—Å–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
    """
    if chat_id not in users:
        # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        users[chat_id] = deepcopy(NB.user_default)
    old_value = users[chat_id][key]  # –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞
    if old_value != value:
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –∫–ª—é—á–∞
        if old_value and key in ["p_sex", "p_age"]:
            value = get_complex_value(old_value, value)
        users[chat_id][key] = value
        return write_to_db()
    return False


def write_to_db():
    """
    –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞ users

    returns:
        bool - —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
    """
    try:
        with open(pickle_file, "wb") as file:
            pickle.dump(users, file)
        return True
    except Exception:
        return False


def get_complex_value(old_value, new_value):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π p_sex –∏–ª–∏ p_age
    if new_value in old_value:
        return "".join(filter(lambda a: a != new_value, list(old_value)))
    else:
        return "".join(sorted(old_value + new_value))


def get_params(key):
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
    keys = {
        "user_male": ("sex", "1", 1, 0, [[1,1]]),
        "user_female": ("sex", "2", 1, 1, [[1,0]]),
        "user_age_1822": ("age", "1", 3, 0, [[3,1], [3,2]]),
        "user_age_2329": ("age", "2", 3, 1, [[3,0], [3,2]]),
        "user_age_30": ("age", "3", 3, 2, [[3,0], [3,1]]),
        "pref_male": ("p_sex", "1", 5, 0, None),
        "pref_female": ("p_sex", "2", 5, 1, None),
        "pref_1822": ("p_age", "1", 7, 0, None),
        "pref_2329": ("p_age", "2", 7, 1, None),
        "pref_30": ("p_age", "3", 7, 2, None),
    }
    return keys.get(key, None)


def check_profile(chat_id):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return (chat_id in users and
        users[chat_id]["sex"] and
        users[chat_id]["age"] and
        users[chat_id]["p_sex"] and
        users[chat_id]["p_age"] and
        users[chat_id]["partner"] is None)


def get_post_buttons(sender_id, sex, age):
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    sex_values = ["üë®", "üë©"]
    age_values = ["18-22", "23-29", "30+"]
    sex, age = int(sex)-1, int(age)-1
    text = f"–û—Ç–≤–µ—Ç–∏—Ç—å    {sex_values[sex]} {age_values[age]}"
    callback_data = f"private_{sender_id}"
    # –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    button_bad = ["–ñ–∞–ª–æ–±–∞   üö´", "complain_msg"]
    return [[text, callback_data], button_bad]


def filtered_users(sender, sender_id):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ
    # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    return [user for user in users if
                user != sender_id and
                check_profile(user) and
                users[user]["sex"] in sender["p_sex"] and
                users[user]["age"] in sender["p_age"] and
                sender["sex"] in users[user]["p_sex"] and
                sender["age"] in users[user]["p_age"]]

def get_file(file):
    file_path = bot.get_file(file).file_path
    link = f'https://api.telegram.org/file/bot{bot_token}/{file_path}'
    try:
        file = requests.get(link).content
    except Exception:
        file = open(bad_file_replacer, "rb")
    return file

def get_reply_message(content_type, message):
    if content_type == "text":
        reply = message.text.replace("eval","–µv–∞l").replace("exec","–µ—Ö–µ—Å")
    elif content_type == "sticker":
        reply = get_file(message.sticker.file_id)
    return reply

def broadcast_post(content_type, sender, chat_id, reply, markup):
    broadcast_to = filtered_users(sender, chat_id)
    if content_type == "text":
        for user in broadcast_to:
            bot.send_message(user, reply, reply_markup=markup)
    elif content_type == "sticker":
        for user in broadcast_to:
            bot.send_sticker(user, reply, reply_markup=markup)

# HANDLERS
@bot.message_handler(commands=["start"])
def send_welcome(message):
    # –ö–æ–º–∞–Ω–¥–∞ /start
    chat_id = message.chat.id
    text = f"{bot_name}–î–æ—Ä–æ—É! –ß–µ–≥–æ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?"
    markup = get_markup(NB.main_buttons)
    sti = open('static/welcome.webp', 'rb')
    bot.send_sticker(chat_id, sti)
    bot.send_message(chat_id, text, reply_markup=markup)


@bot.message_handler(commands=["end"])
def end_private(message):
    # –ö–æ–º–∞–Ω–¥–∞ /end
    text = (f"{bot_name}!  –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" +
        " –∏–ª–∏ –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–æ—à–ª–æ–µ  !")
    sender_id = message.chat.id
    receiver_id = users[sender_id]["partner"]
    if receiver_id:
        for user in [sender_id, receiver_id]:
            users[user]["partner"] = None
            bot.send_message(user, text)
        write_to_db()
    else:
        text = f"{bot_name}!  –í—ã –Ω–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ  !"
        bot.send_message(sender_id, text)

@bot.message_handler(content_types=["text", "sticker"])
def any_msg(message):
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    chat_id = message.chat.id
    if check_profile(chat_id):
        # –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ nonsense_buttons.py —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏
        ct = message.content_type  # ct as content_type
        button_post = ["–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ   \u2709", f"post_msg_{ct}"]
        markup = get_markup([[button_post]])
        send_distributed_msg(message, chat_id, markup)
    elif users[chat_id]["partner"]:
        send_distributed_msg(message, users[chat_id]["partner"])
    else:
        text = f"{bot_name}–ü–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"

def send_distributed_msg(message, chat_id, markup=None):
    content_type = message.content_type
    partner_id = users[chat_id]["partner"] or chat_id
    message_id = message.message_id
    if content_type == "text":
        bot.send_message(chat_id, message.text, reply_markup=markup)
    elif content_type == "sticker":
        if markup:
            sticker = get_file(message.sticker.file_id)
            bot.send_sticker(chat_id, sticker, reply_markup=markup)
        else:
            bot.forward_message(chat_id, partner_id, message_id)

# @bot.message_handler(content_types=["text"])
# def any_msg(message):
#     # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#     chat_id = message.chat.id
#     print(users)
#     if check_profile(chat_id):
#         # –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ nonsense_buttons.py —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏
#         button_post = ["–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ   \u2709", "post_msg"]
#         markup = get_markup([[button_post]])
#         bot.send_message(chat_id, message.text, reply_markup=markup)
#     elif users[chat_id]["partner"]:
#         bot.send_message(users[chat_id]["partner"], message.text)
#     else:
#         text = f"{bot_name}–ü–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
#         markup = get_markup(NB.main_buttons)
#         bot.send_message(chat_id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
    chat_id = call.message.chat.id

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if call.data == "mainmenu":
        text = f"{bot_name}–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        markup = get_markup(NB.main_buttons)
        bot.edit_message_text(chat_id=chat_id, text=text, reply_markup=markup,
            message_id=call.message.message_id)

    # –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
    elif call.data == "main_search_button":
        bot.send_message(chat_id, '‚ùó–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∏—Å–∫')
    elif call.data == "main_porn_button":
        bot.send_message(chat_id, '‚ùó–¢—É—Ç –±—É–¥–µ—Ç –ø—Ä–æ–Ω')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    elif call.data == "main_settings_button":
        edit_settings(call.message)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif call.data.startswith(("user_", "pref_")):
        key, value, line_index, button_index, conflict = get_params(call.data)
        if update_db(chat_id, key, value):
            options = [line_index, button_index, conflict]
            edit_settings(call.message, True, options)

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    elif call.data.startswith("post_msg_"):
        # –¢–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
        msg_timeout = 60
        _s = users[chat_id]  # s as sender
        now_msg_time = int(datetime.timestamp(datetime.utcnow()))
        last_msg_time = _s["msg_time"]
        if not last_msg_time or now_msg_time - last_msg_time > msg_timeout:
            post_buttons = get_post_buttons(chat_id, _s["sex"], _s["age"])
            markup = get_markup([post_buttons])
            content_type = call.data[9:]
            reply = get_reply_message(content_type, call.message)
            broadcast_post(content_type, _s, chat_id, reply, markup)
            # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            text = f"{bot_name}! –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ !"
            bot.send_message(chat_id, text)
            update_db(chat_id, "msg_time", now_msg_time)
        else:
            # –ø—Ä–æ—à–ª–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±—ã–ª–∞ –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
            text = (f"{bot_name}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Ç–µ–º," +
                " –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤—ã–≤–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
            bot.answer_callback_query(callback_query_id=call.id,
                show_alert=True, text=text)

    # –ü—Ä–∏–≤–∞—Ç
    elif call.data.startswith("private_"):
        receiver_id = int(call.data[8:])
        text = f"{bot_name}!  –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω, –¥–∏–∞–ª–æ–≥ –Ω–∞—á–∞–ª—Å—è  !"
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
        users[chat_id]["partner"] = receiver_id
        users[receiver_id]["partner"] = chat_id
        # —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        bot.send_message(chat_id, text)
        bot.send_message(receiver_id, text)
        write_to_db()


if __name__ == "__main__":
    # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.polling(none_stop=True)
